//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Actions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""54ef2ddd-d03d-49ce-bdd7-f221a18141b0"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3d04b78e-5fd2-4acf-9bcc-730bcc12120f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5b2142ca-314d-43d7-88d7-8d1f0f7c761d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""84c132bc-7a48-44b9-bb3c-9aeaa1d4b48a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""378e48ba-0670-4407-8100-564fc886fc9f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a865d0d5-6016-4ec9-82a9-8b7cb54936f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""27fdc471-0bf7-4734-8ee5-2e3420943bdd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""9b311cea-942f-41bf-bbad-d219095cfa9b"",
            ""actions"": [
                {
                    ""name"": ""ExecuteAttack"",
                    ""type"": ""Button"",
                    ""id"": ""8a9b0937-2f91-4ac1-b532-3fc096dd8b3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6115a86c-c8ab-4afc-9e56-25b915b4e139"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExecuteAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""NewAttack"",
            ""id"": ""da417506-c251-4f38-a335-05a20551b503"",
            ""actions"": [
                {
                    ""name"": ""NewClick"",
                    ""type"": ""Button"",
                    ""id"": ""4a51f473-4e5b-4a93-b7c7-89f554fbe222"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""149e4bc6-be1e-4f90-852c-02da04ec4c0f"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NewClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Attack
        m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
        m_Attack_ExecuteAttack = m_Attack.FindAction("ExecuteAttack", throwIfNotFound: true);
        // NewAttack
        m_NewAttack = asset.FindActionMap("NewAttack", throwIfNotFound: true);
        m_NewAttack_NewClick = m_NewAttack.FindAction("NewClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerActions m_Wrapper;
        public MovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Attack
    private readonly InputActionMap m_Attack;
    private List<IAttackActions> m_AttackActionsCallbackInterfaces = new List<IAttackActions>();
    private readonly InputAction m_Attack_ExecuteAttack;
    public struct AttackActions
    {
        private @PlayerActions m_Wrapper;
        public AttackActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ExecuteAttack => m_Wrapper.m_Attack_ExecuteAttack;
        public InputActionMap Get() { return m_Wrapper.m_Attack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
        public void AddCallbacks(IAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_AttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AttackActionsCallbackInterfaces.Add(instance);
            @ExecuteAttack.started += instance.OnExecuteAttack;
            @ExecuteAttack.performed += instance.OnExecuteAttack;
            @ExecuteAttack.canceled += instance.OnExecuteAttack;
        }

        private void UnregisterCallbacks(IAttackActions instance)
        {
            @ExecuteAttack.started -= instance.OnExecuteAttack;
            @ExecuteAttack.performed -= instance.OnExecuteAttack;
            @ExecuteAttack.canceled -= instance.OnExecuteAttack;
        }

        public void RemoveCallbacks(IAttackActions instance)
        {
            if (m_Wrapper.m_AttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_AttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AttackActions @Attack => new AttackActions(this);

    // NewAttack
    private readonly InputActionMap m_NewAttack;
    private List<INewAttackActions> m_NewAttackActionsCallbackInterfaces = new List<INewAttackActions>();
    private readonly InputAction m_NewAttack_NewClick;
    public struct NewAttackActions
    {
        private @PlayerActions m_Wrapper;
        public NewAttackActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @NewClick => m_Wrapper.m_NewAttack_NewClick;
        public InputActionMap Get() { return m_Wrapper.m_NewAttack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewAttackActions set) { return set.Get(); }
        public void AddCallbacks(INewAttackActions instance)
        {
            if (instance == null || m_Wrapper.m_NewAttackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NewAttackActionsCallbackInterfaces.Add(instance);
            @NewClick.started += instance.OnNewClick;
            @NewClick.performed += instance.OnNewClick;
            @NewClick.canceled += instance.OnNewClick;
        }

        private void UnregisterCallbacks(INewAttackActions instance)
        {
            @NewClick.started -= instance.OnNewClick;
            @NewClick.performed -= instance.OnNewClick;
            @NewClick.canceled -= instance.OnNewClick;
        }

        public void RemoveCallbacks(INewAttackActions instance)
        {
            if (m_Wrapper.m_NewAttackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INewAttackActions instance)
        {
            foreach (var item in m_Wrapper.m_NewAttackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NewAttackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NewAttackActions @NewAttack => new NewAttackActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IAttackActions
    {
        void OnExecuteAttack(InputAction.CallbackContext context);
    }
    public interface INewAttackActions
    {
        void OnNewClick(InputAction.CallbackContext context);
    }
}
